{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MSBA_2019Fall_Final Project_Xuemeng Wu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Dataset Description"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Context"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data comes from myhappyforce.com where employees report daily happiness levels at work. This platform (app) is used by companies to track happiness of the workforce, which helps us better understand the phenomenon of employee turnover. The cost of employee turnover has been pointed out extensively in the literature. A high turnover rate not only increases human resource costs, which can reach up to 150% of the annual salary per replaced employee, but it also has social costs, as it is correlated with lower wages, lower productivity per employee, and not surprisingly, a less loyal workforce.\n",
    "\n",
    "The anonymized data is opensourced on Kaggle.com. The data source is real and reliable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Goal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The goal is to clarify the characteristics of employees that will churn (or that are at risk of churning), to help companies understand the causes so they can reduce the turnover rate. We assume that the top feautures of employees that churn are:\n",
    "\n",
    "- low relative happiness \n",
    "- high happiness level fluctuation\n",
    "- low ratio of likes "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3 Content"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data consists of three tables: votes, interactions and churn. \n",
    "- A vote was obtained when an employee opened the app and answered the question: How happy are you at work today? To vote the employee indicates their feeling by touching one of four icons that appeared on the screen. \n",
    "- After the employee indicates their happiness level, a second screen appears where they can see their peersâ€™ comments and like or dislike them, this data is stored in the interactions table. \n",
    "- The churn table contains when an employee churned (quit or was fired).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dataset 1: Votes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data regarding the votes of the app users is stored in votes.csv. This file containg 4 different columns:\n",
    "\n",
    "- employee: An integer ID that identifies an amployee inside a company.\n",
    "- companyAlias: A hash ID for a given company that uses the app. An employee can be uniquely identified with the tuple (employee,companyAlias).\n",
    "- voteDate: String representing the date a given vote was emited.\n",
    "- vote: The numeric value of the vote emited ranging from 1 to 4."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dataset 2: Interacion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The file Interactions.csv contains information about which employee liked or disliked a given comment.\n",
    "\n",
    "- employee: An integer ID that identifies an amployee inside a company.\n",
    "- companyAlias: A hash ID for a given company that uses the app. An employee can be uniquely identified with the tuple (employee,companyAlias).\n",
    "- commentId: A unique ID for a given comment.\n",
    "- liked: A boolean that is True if the employee liked the comment.\n",
    "- disliked: A boolean that is True if the employee disliked the comment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dataset 3: Churn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Churn.csv file contains information about the date of the last interaction of an employee with the app.\n",
    "\n",
    "- employee: An integer ID that identifies an amployee inside a company.\n",
    "- companyAlias: A hash ID for a given company that uses the app. An employee can be uniquely identified with the tuple (employee,companyAlias).\n",
    "- numVotes: Total number of happyness votes emited by the user.\n",
    "- lastParticipationDate: Date of the last interaction of the user with the app.\n",
    "- stillExists: Boolean that is True if the user is still registered in the app."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Read in and Clean Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1 Read data and adjust the format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Xuemeng/opt/anaconda3/lib/python3.7/site-packages/dateutil/parser/_parser.py:1206: UnknownTimezoneWarning: tzname CET identified but not understood.  Pass `tzinfos` argument in order to correctly return a timezone-aware datetime.  In a future version, this will raise an exception.\n",
      "  category=UnknownTimezoneWarning)\n",
      "/Users/Xuemeng/opt/anaconda3/lib/python3.7/site-packages/dateutil/parser/_parser.py:1206: UnknownTimezoneWarning: tzname CEST identified but not understood.  Pass `tzinfos` argument in order to correctly return a timezone-aware datetime.  In a future version, this will raise an exception.\n",
      "  category=UnknownTimezoneWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>voteDate</th>\n",
       "      <th>vote</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>2016-02-01 01:00:00</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>2016-02-01 01:00:00</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>79</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>2016-02-01 01:00:00</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>94</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>2016-02-01 01:00:00</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>2016-02-01 01:00:00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias            voteDate  vote\n",
       "0        31  56aec740f1ef260003e307d6 2016-02-01 01:00:00     4\n",
       "1        33  56aec740f1ef260003e307d6 2016-02-01 01:00:00     4\n",
       "2        79  56aec740f1ef260003e307d6 2016-02-01 01:00:00     4\n",
       "3        94  56aec740f1ef260003e307d6 2016-02-01 01:00:00     4\n",
       "4        16  56aec740f1ef260003e307d6 2016-02-01 01:00:00     2"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import Dataset\n",
    "import pandas as pd\n",
    "\n",
    "# read the file into a dataframe\n",
    "# change the format of dates into DD/MM/YYYY\n",
    "# drop the dulicates in the datset\n",
    "votes = pd.read_csv(\"./votes.csv\",parse_dates=[2]).drop_duplicates()\n",
    "votes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Xuemeng/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (2,3) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>liked</th>\n",
       "      <th>disliked</th>\n",
       "      <th>commentId</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>307</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>58d018d7e010990004e38070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>58d018d7e010990004e38070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>276</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>58d018d7e010990004e38070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>58d018d7e010990004e38070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>382</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>58d0179ae010990004e3806d</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias liked disliked                 commentId\n",
       "0       307  56aec740f1ef260003e307d6  True    False  58d018d7e010990004e38070\n",
       "1        36  56aec740f1ef260003e307d6  True    False  58d018d7e010990004e38070\n",
       "2       276  56aec740f1ef260003e307d6  True    False  58d018d7e010990004e38070\n",
       "3        24  56aec740f1ef260003e307d6  True    False  58d018d7e010990004e38070\n",
       "4       382  56aec740f1ef260003e307d6  True    False  58d0179ae010990004e3806d"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interaction = pd.read_csv(\"./commentInteractions.csv\").drop_duplicates()\n",
    "interaction.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>numVotes</th>\n",
       "      <th>lastParticipationDate</th>\n",
       "      <th>stillExists</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>512</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>4</td>\n",
       "      <td>2017-02-23 12:48:04</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-2</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>0</td>\n",
       "      <td>2017-01-18 14:00:55</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>72</td>\n",
       "      <td>2017-03-17 01:00:00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>487</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>14</td>\n",
       "      <td>2016-11-19 15:02:14</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>22</td>\n",
       "      <td>2017-02-16 01:00:00</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias  numVotes lastParticipationDate  \\\n",
       "0       512  56aec740f1ef260003e307d6         4   2017-02-23 12:48:04   \n",
       "1        -2  56aec740f1ef260003e307d6         0   2017-01-18 14:00:55   \n",
       "2         2  56aec740f1ef260003e307d6        72   2017-03-17 01:00:00   \n",
       "3       487  56aec740f1ef260003e307d6        14   2016-11-19 15:02:14   \n",
       "4         3  56aec740f1ef260003e307d6        22   2017-02-16 01:00:00   \n",
       "\n",
       "   stillExists  \n",
       "0         True  \n",
       "1        False  \n",
       "2         True  \n",
       "3        False  \n",
       "4         True  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn = pd.read_csv(\"./churn.csv\", parse_dates=[3]).drop_duplicates()\n",
    "churn.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 Remove the unnecessary columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>vote</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>79</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>94</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias  vote\n",
       "0        31  56aec740f1ef260003e307d6     4\n",
       "1        33  56aec740f1ef260003e307d6     4\n",
       "2        79  56aec740f1ef260003e307d6     4\n",
       "3        94  56aec740f1ef260003e307d6     4\n",
       "4        16  56aec740f1ef260003e307d6     2"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# remove the columns we won't be using in each dataset\n",
    "votes.drop([\"voteDate\"], axis=1, inplace=True)\n",
    "votes.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>liked</th>\n",
       "      <th>disliked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>307</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>276</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>382</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias liked disliked\n",
       "0       307  56aec740f1ef260003e307d6  True    False\n",
       "1        36  56aec740f1ef260003e307d6  True    False\n",
       "2       276  56aec740f1ef260003e307d6  True    False\n",
       "3        24  56aec740f1ef260003e307d6  True    False\n",
       "4       382  56aec740f1ef260003e307d6  True    False"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interaction.drop([\"commentId\"], axis=1, inplace=True)\n",
    "interaction.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>numVotes</th>\n",
       "      <th>stillExists</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>512</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>4</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-2</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>72</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>487</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>14</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>22</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias  numVotes  stillExists\n",
       "0       512  56aec740f1ef260003e307d6         4         True\n",
       "1        -2  56aec740f1ef260003e307d6         0        False\n",
       "2         2  56aec740f1ef260003e307d6        72         True\n",
       "3       487  56aec740f1ef260003e307d6        14        False\n",
       "4         3  56aec740f1ef260003e307d6        22         True"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn.drop([\"lastParticipationDate\"], axis=1, inplace=True)\n",
    "churn.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- Since we are not going to investigate the time series in this scenario, it will be much easier if we remove the unnecessary columns related to time in each dataset.\n",
    "- Besides, we don't care which specific comments that our observations show attitude on, so we can remove the \"commentId\" column in the interaction data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 Check the data types and nulls "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 221145 entries, 0 to 221231\n",
      "Data columns (total 3 columns):\n",
      "employee        221145 non-null int64\n",
      "companyAlias    221145 non-null object\n",
      "vote            221145 non-null int64\n",
      "dtypes: int64(2), object(1)\n",
      "memory usage: 6.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# check data types and nulls\n",
    "votes.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 336953 entries, 0 to 336959\n",
      "Data columns (total 4 columns):\n",
      "employee        336953 non-null int64\n",
      "companyAlias    336953 non-null object\n",
      "liked           336952 non-null object\n",
      "disliked        336952 non-null object\n",
      "dtypes: int64(1), object(3)\n",
      "memory usage: 12.9+ MB\n"
     ]
    }
   ],
   "source": [
    "interaction.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4847 entries, 0 to 4846\n",
      "Data columns (total 4 columns):\n",
      "employee        4847 non-null int64\n",
      "companyAlias    4847 non-null object\n",
      "numVotes        4847 non-null int64\n",
      "stillExists     4847 non-null bool\n",
      "dtypes: bool(1), int64(2), object(1)\n",
      "memory usage: 156.2+ KB\n"
     ]
    }
   ],
   "source": [
    "churn.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- We can see that several columns in the interaction dataset and the churn dataset haven't been binarized. But the good thing is that there is any nulls to deal with."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.4 Encode categorical variables and pars column headers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>disliked</th>\n",
       "      <th>liked_False</th>\n",
       "      <th>liked_True</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>307</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>276</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>382</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias disliked  liked_False  liked_True\n",
       "0       307  56aec740f1ef260003e307d6    False            0           1\n",
       "1        36  56aec740f1ef260003e307d6    False            0           1\n",
       "2       276  56aec740f1ef260003e307d6    False            0           1\n",
       "3        24  56aec740f1ef260003e307d6    False            0           1\n",
       "4       382  56aec740f1ef260003e307d6    False            0           1"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for the dataset \"interaction\", encode columns \"likes\" and \"dislikes\" into 1 and 0 and convert two columns into one column named \"likes\"\n",
    "\n",
    "# convert like as 1 and dislike as 0\n",
    "interaction = pd.get_dummies(interaction, columns = [\"liked\"])\n",
    "interaction.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>likes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>307</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>276</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>382</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias  likes\n",
       "0       307  56aec740f1ef260003e307d6      1\n",
       "1        36  56aec740f1ef260003e307d6      1\n",
       "2       276  56aec740f1ef260003e307d6      1\n",
       "3        24  56aec740f1ef260003e307d6      1\n",
       "4       382  56aec740f1ef260003e307d6      1"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert two columns into one column named \"likes\" \n",
    "interaction.drop ([\"disliked\",\"liked_False\"], axis=1, inplace=True)\n",
    "\n",
    "interaction = interaction.rename(columns={\"liked_True\": \"likes\"})\n",
    "interaction.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>companyAlias</th>\n",
       "      <th>numVotes</th>\n",
       "      <th>stillExists</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>512</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-2</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>487</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   employee              companyAlias  numVotes  stillExists\n",
       "0       512  56aec740f1ef260003e307d6         4            1\n",
       "1        -2  56aec740f1ef260003e307d6         0            0\n",
       "2         2  56aec740f1ef260003e307d6        72            1\n",
       "3       487  56aec740f1ef260003e307d6        14            0\n",
       "4         3  56aec740f1ef260003e307d6        22            1"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for the dataset \"churn\", encode column \"stillExists\" into 1 and 0\n",
    "\n",
    "churn = pd.get_dummies(churn, columns = [\"stillExists\"])\n",
    "churn.drop([\"stillExists_False\"], axis = 1, inplace = True)\n",
    "churn = churn.rename(columns={\"stillExists_True\": \"stillExists\"})\n",
    "churn.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- For the dataset \"interaction\", we would like to examine how many likes they show on the comments from others. It is a good indicator of being engaged with this survey and a good refelction of happiness status. So we transfer the orginal \"liked\" and \"disliked\" conlumns into one \"likes\" column to simplify the situation without losing any critical information.\n",
    "- For the dataset \"churn\", we would like to investigate the actual churn behavior of all the emloyees. It will be easier converting \"True\" and \"False\" in the column \"stillExists\" to count values in the future analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Exploratory Data Analysis "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1 Examine the distribution of features in each dataset separately"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>vote</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>221145.000000</td>\n",
       "      <td>221145.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>172.140998</td>\n",
       "      <td>2.861634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>172.750815</td>\n",
       "      <td>0.986119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>127.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>222.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            employee           vote\n",
       "count  221145.000000  221145.000000\n",
       "mean      172.140998       2.861634\n",
       "std       172.750815       0.986119\n",
       "min         1.000000       1.000000\n",
       "25%        50.000000       2.000000\n",
       "50%       127.000000       3.000000\n",
       "75%       222.000000       4.000000\n",
       "max       999.000000       4.000000"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate the summary data stats of dataset \"votes\"\n",
    "votes.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# count the number of companies that employees work for and show attitude of happiness \n",
    "votes.companyAlias.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>vote</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>companyAlias</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5370af43e4b0cff95558c12a</td>\n",
       "      <td>100.393891</td>\n",
       "      <td>3.037703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>53a2dd43e4b01cc02f1e9011</td>\n",
       "      <td>115.118590</td>\n",
       "      <td>2.997436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5474b9cde4b0bf7614b2c66f</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>3.456522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54d43612e4b0f6a40755d93e</td>\n",
       "      <td>8.502262</td>\n",
       "      <td>2.918552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54e52607e4b01191dc064966</td>\n",
       "      <td>296.357239</td>\n",
       "      <td>2.591800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>552e2d00e4b066b42fd122ed</td>\n",
       "      <td>25.131054</td>\n",
       "      <td>2.880342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5641f96713664c000332c8cd</td>\n",
       "      <td>150.611562</td>\n",
       "      <td>2.801416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56558cfd07a5de00030908fb</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.964286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>567011c035dce00003a07fa4</td>\n",
       "      <td>119.582177</td>\n",
       "      <td>2.643531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56ab28dc1f385d0003454757</td>\n",
       "      <td>54.954248</td>\n",
       "      <td>3.032680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56ae7b02f1ef260003e3072c</td>\n",
       "      <td>14.928571</td>\n",
       "      <td>3.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>201.548213</td>\n",
       "      <td>3.236470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56e2a905e3b6fe0003e32855</td>\n",
       "      <td>34.749018</td>\n",
       "      <td>2.843838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56fd2b64f41c670003f643c8</td>\n",
       "      <td>37.664489</td>\n",
       "      <td>2.643324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>573a0671b5ec330003add34a</td>\n",
       "      <td>17.250000</td>\n",
       "      <td>3.625000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>573f2c4a3517490003ef7710</td>\n",
       "      <td>39.206806</td>\n",
       "      <td>3.090314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5742d699f839a10003a407d2</td>\n",
       "      <td>96.121195</td>\n",
       "      <td>2.878524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>574c423856b6300003009953</td>\n",
       "      <td>72.366890</td>\n",
       "      <td>3.368446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>574c5ade56b6300003009965</td>\n",
       "      <td>179.058688</td>\n",
       "      <td>2.633187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57908a2622881200033b34d7</td>\n",
       "      <td>20.624654</td>\n",
       "      <td>3.509695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57ac8b23be7fe30003e656d0</td>\n",
       "      <td>163.776467</td>\n",
       "      <td>3.089277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57bb2f0b3bae540003a8d453</td>\n",
       "      <td>79.028372</td>\n",
       "      <td>2.855814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57c4aa7dbb8b5c000396fd3b</td>\n",
       "      <td>27.441902</td>\n",
       "      <td>3.475316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57d1eb86a22c9d0003dd1f05</td>\n",
       "      <td>23.570784</td>\n",
       "      <td>2.770209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57d956302a040a00036a8905</td>\n",
       "      <td>157.893396</td>\n",
       "      <td>3.028743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57d979b72a040a00036a8925</td>\n",
       "      <td>10.162304</td>\n",
       "      <td>3.418848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57dd2d6a4018d9000339ca43</td>\n",
       "      <td>163.752940</td>\n",
       "      <td>3.002642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57e518026d641600035db88a</td>\n",
       "      <td>9.245283</td>\n",
       "      <td>3.396226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57fcf18712cdbd000396e310</td>\n",
       "      <td>30.010309</td>\n",
       "      <td>3.247423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5809cc9eff2ea40003fda44d</td>\n",
       "      <td>63.938544</td>\n",
       "      <td>2.690715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5809cde3ff2ea40003fda452</td>\n",
       "      <td>23.777500</td>\n",
       "      <td>3.385000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>581b08041a0ef8000308aef6</td>\n",
       "      <td>122.650626</td>\n",
       "      <td>2.487488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58a728a0e75bda00042a3468</td>\n",
       "      <td>368.498904</td>\n",
       "      <td>2.763706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58b471b384db3200044dd1b9</td>\n",
       "      <td>8.913043</td>\n",
       "      <td>2.684783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58b9adfce75bf80004df6536</td>\n",
       "      <td>11.870370</td>\n",
       "      <td>3.148148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58bf03e5cff4fa0004dd44ef</td>\n",
       "      <td>15.800000</td>\n",
       "      <td>3.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58c6e15f32f72a00046f556c</td>\n",
       "      <td>31.952381</td>\n",
       "      <td>2.777778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            employee      vote\n",
       "companyAlias                                  \n",
       "5370af43e4b0cff95558c12a  100.393891  3.037703\n",
       "53a2dd43e4b01cc02f1e9011  115.118590  2.997436\n",
       "5474b9cde4b0bf7614b2c66f    7.500000  3.456522\n",
       "54d43612e4b0f6a40755d93e    8.502262  2.918552\n",
       "54e52607e4b01191dc064966  296.357239  2.591800\n",
       "552e2d00e4b066b42fd122ed   25.131054  2.880342\n",
       "5641f96713664c000332c8cd  150.611562  2.801416\n",
       "56558cfd07a5de00030908fb    8.000000  2.964286\n",
       "567011c035dce00003a07fa4  119.582177  2.643531\n",
       "56ab28dc1f385d0003454757   54.954248  3.032680\n",
       "56ae7b02f1ef260003e3072c   14.928571  3.333333\n",
       "56aec740f1ef260003e307d6  201.548213  3.236470\n",
       "56e2a905e3b6fe0003e32855   34.749018  2.843838\n",
       "56fd2b64f41c670003f643c8   37.664489  2.643324\n",
       "573a0671b5ec330003add34a   17.250000  3.625000\n",
       "573f2c4a3517490003ef7710   39.206806  3.090314\n",
       "5742d699f839a10003a407d2   96.121195  2.878524\n",
       "574c423856b6300003009953   72.366890  3.368446\n",
       "574c5ade56b6300003009965  179.058688  2.633187\n",
       "57908a2622881200033b34d7   20.624654  3.509695\n",
       "57ac8b23be7fe30003e656d0  163.776467  3.089277\n",
       "57bb2f0b3bae540003a8d453   79.028372  2.855814\n",
       "57c4aa7dbb8b5c000396fd3b   27.441902  3.475316\n",
       "57d1eb86a22c9d0003dd1f05   23.570784  2.770209\n",
       "57d956302a040a00036a8905  157.893396  3.028743\n",
       "57d979b72a040a00036a8925   10.162304  3.418848\n",
       "57dd2d6a4018d9000339ca43  163.752940  3.002642\n",
       "57e518026d641600035db88a    9.245283  3.396226\n",
       "57fcf18712cdbd000396e310   30.010309  3.247423\n",
       "5809cc9eff2ea40003fda44d   63.938544  2.690715\n",
       "5809cde3ff2ea40003fda452   23.777500  3.385000\n",
       "581b08041a0ef8000308aef6  122.650626  2.487488\n",
       "58a728a0e75bda00042a3468  368.498904  2.763706\n",
       "58b471b384db3200044dd1b9    8.913043  2.684783\n",
       "58b9adfce75bf80004df6536   11.870370  3.148148\n",
       "58bf03e5cff4fa0004dd44ef   15.800000  3.666667\n",
       "58c6e15f32f72a00046f556c   31.952381  2.777778"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# examine the average happniess level of each company\n",
    "votes.groupby([\"companyAlias\"]).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function seaborn.categorical.barplot(x=None, y=None, hue=None, data=None, order=None, hue_order=None, estimator=<function mean at 0x104d41050>, ci=95, n_boot=1000, units=None, orient=None, color=None, palette=None, saturation=0.75, errcolor='.26', errwidth=None, capsize=None, dodge=True, ax=None, **kwargs)>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "f,axarr = fig, ax = plt.subplots(ncols=1, nrows=1,figsize=(12,10))\n",
    "data = votes.groupby('companyAlias').mean()\n",
    "sns.barplot(x = data.index,y = data['vote'])\n",
    "sns.barplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>likes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>336953.000000</td>\n",
       "      <td>336953.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>162.880408</td>\n",
       "      <td>0.844011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>182.071433</td>\n",
       "      <td>0.362846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-218.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>212.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            employee          likes\n",
       "count  336953.000000  336953.000000\n",
       "mean      162.880408       0.844011\n",
       "std       182.071433       0.362846\n",
       "min      -218.000000       0.000000\n",
       "25%        38.000000       1.000000\n",
       "50%       122.000000       1.000000\n",
       "75%       212.000000       1.000000\n",
       "max       999.000000       1.000000"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate the summary data stats of dataset \"interaction\"\n",
    "interaction.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    284392\n",
       "0     52561\n",
       "Name: likes, dtype: int64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interaction.likes.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>numVotes</th>\n",
       "      <th>stillExists</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>4847.000000</td>\n",
       "      <td>4847.000000</td>\n",
       "      <td>4847.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>167.375490</td>\n",
       "      <td>45.896431</td>\n",
       "      <td>0.757788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>208.271041</td>\n",
       "      <td>71.302128</td>\n",
       "      <td>0.428466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-218.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>113.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>231.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>740.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          employee     numVotes  stillExists\n",
       "count  4847.000000  4847.000000  4847.000000\n",
       "mean    167.375490    45.896431     0.757788\n",
       "std     208.271041    71.302128     0.428466\n",
       "min    -218.000000     0.000000     0.000000\n",
       "25%      33.000000     3.000000     1.000000\n",
       "50%     113.000000    16.000000     1.000000\n",
       "75%     231.000000    59.000000     1.000000\n",
       "max     999.000000   740.000000     1.000000"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate the summary data stats of dataset \"churn\"\n",
    "churn.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>numVotes</th>\n",
       "      <th>stillExists</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>companyAlias</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5370af43e4b0cff95558c12a</td>\n",
       "      <td>75.845238</td>\n",
       "      <td>18.857143</td>\n",
       "      <td>0.151786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>53a2dd43e4b01cc02f1e9011</td>\n",
       "      <td>102.600000</td>\n",
       "      <td>31.200000</td>\n",
       "      <td>0.880000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5474b9cde4b0bf7614b2c66f</td>\n",
       "      <td>8.100000</td>\n",
       "      <td>4.600000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54d43612e4b0f6a40755d93e</td>\n",
       "      <td>10.681818</td>\n",
       "      <td>20.227273</td>\n",
       "      <td>0.636364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54e52607e4b01191dc064966</td>\n",
       "      <td>281.196451</td>\n",
       "      <td>64.967047</td>\n",
       "      <td>0.376426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>552e2d00e4b066b42fd122ed</td>\n",
       "      <td>20.931034</td>\n",
       "      <td>12.103448</td>\n",
       "      <td>0.862069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5641f96713664c000332c8cd</td>\n",
       "      <td>177.209821</td>\n",
       "      <td>102.803571</td>\n",
       "      <td>0.825893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56558cfd07a5de00030908fb</td>\n",
       "      <td>7.416667</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>567011c035dce00003a07fa4</td>\n",
       "      <td>120.934911</td>\n",
       "      <td>21.313609</td>\n",
       "      <td>0.911243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56ab28dc1f385d0003454757</td>\n",
       "      <td>55.676471</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>0.941176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56ae7b02f1ef260003e3072c</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>2.100000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56aec740f1ef260003e307d6</td>\n",
       "      <td>234.014045</td>\n",
       "      <td>75.264045</td>\n",
       "      <td>0.912921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56e2a905e3b6fe0003e32855</td>\n",
       "      <td>55.564356</td>\n",
       "      <td>52.940594</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56fd2b64f41c670003f643c8</td>\n",
       "      <td>45.560000</td>\n",
       "      <td>51.026667</td>\n",
       "      <td>0.853333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>573a0671b5ec330003add34a</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>573f2c4a3517490003ef7710</td>\n",
       "      <td>40.253731</td>\n",
       "      <td>11.402985</td>\n",
       "      <td>0.985075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5742d699f839a10003a407d2</td>\n",
       "      <td>109.775510</td>\n",
       "      <td>127.489796</td>\n",
       "      <td>0.918367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>574c423856b6300003009953</td>\n",
       "      <td>83.058824</td>\n",
       "      <td>42.209150</td>\n",
       "      <td>0.771242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>574c5ade56b6300003009965</td>\n",
       "      <td>189.542662</td>\n",
       "      <td>57.631399</td>\n",
       "      <td>0.972696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57908a2622881200033b34d7</td>\n",
       "      <td>33.921569</td>\n",
       "      <td>14.156863</td>\n",
       "      <td>0.725490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57ac8b23be7fe30003e656d0</td>\n",
       "      <td>172.656604</td>\n",
       "      <td>22.064151</td>\n",
       "      <td>0.943396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57bb2f0b3bae540003a8d453</td>\n",
       "      <td>87.369565</td>\n",
       "      <td>46.739130</td>\n",
       "      <td>0.949275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57c4aa7dbb8b5c000396fd3b</td>\n",
       "      <td>28.437500</td>\n",
       "      <td>71.250000</td>\n",
       "      <td>0.958333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57d1eb86a22c9d0003dd1f05</td>\n",
       "      <td>27.480000</td>\n",
       "      <td>50.420000</td>\n",
       "      <td>0.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57d956302a040a00036a8905</td>\n",
       "      <td>143.877193</td>\n",
       "      <td>32.146199</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57d979b72a040a00036a8925</td>\n",
       "      <td>14.166667</td>\n",
       "      <td>10.611111</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57dd2d6a4018d9000339ca43</td>\n",
       "      <td>150.462185</td>\n",
       "      <td>49.302521</td>\n",
       "      <td>0.823529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57e518026d641600035db88a</td>\n",
       "      <td>11.666667</td>\n",
       "      <td>5.888889</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>57fcf18712cdbd000396e310</td>\n",
       "      <td>25.708333</td>\n",
       "      <td>4.041667</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5809cc9eff2ea40003fda44d</td>\n",
       "      <td>65.473684</td>\n",
       "      <td>19.697368</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5809cde3ff2ea40003fda452</td>\n",
       "      <td>22.840909</td>\n",
       "      <td>27.272727</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>581b08041a0ef8000308aef6</td>\n",
       "      <td>117.901408</td>\n",
       "      <td>29.640845</td>\n",
       "      <td>0.936620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58a728a0e75bda00042a3468</td>\n",
       "      <td>351.656613</td>\n",
       "      <td>8.464037</td>\n",
       "      <td>0.733179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58b471b384db3200044dd1b9</td>\n",
       "      <td>8.571429</td>\n",
       "      <td>6.571429</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58b9adfce75bf80004df6536</td>\n",
       "      <td>13.190476</td>\n",
       "      <td>7.714286</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58bf03e5cff4fa0004dd44ef</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>58c6e15f32f72a00046f556c</td>\n",
       "      <td>31.500000</td>\n",
       "      <td>1.050000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            employee    numVotes  stillExists\n",
       "companyAlias                                                 \n",
       "5370af43e4b0cff95558c12a   75.845238   18.857143     0.151786\n",
       "53a2dd43e4b01cc02f1e9011  102.600000   31.200000     0.880000\n",
       "5474b9cde4b0bf7614b2c66f    8.100000    4.600000     1.000000\n",
       "54d43612e4b0f6a40755d93e   10.681818   20.227273     0.636364\n",
       "54e52607e4b01191dc064966  281.196451   64.967047     0.376426\n",
       "552e2d00e4b066b42fd122ed   20.931034   12.103448     0.862069\n",
       "5641f96713664c000332c8cd  177.209821  102.803571     0.825893\n",
       "56558cfd07a5de00030908fb    7.416667    2.333333     1.000000\n",
       "567011c035dce00003a07fa4  120.934911   21.313609     0.911243\n",
       "56ab28dc1f385d0003454757   55.676471    4.500000     0.941176\n",
       "56ae7b02f1ef260003e3072c   11.000000    2.100000     1.000000\n",
       "56aec740f1ef260003e307d6  234.014045   75.264045     0.912921\n",
       "56e2a905e3b6fe0003e32855   55.564356   52.940594     1.000000\n",
       "56fd2b64f41c670003f643c8   45.560000   51.026667     0.853333\n",
       "573a0671b5ec330003add34a   18.000000    4.000000     1.000000\n",
       "573f2c4a3517490003ef7710   40.253731   11.402985     0.985075\n",
       "5742d699f839a10003a407d2  109.775510  127.489796     0.918367\n",
       "574c423856b6300003009953   83.058824   42.209150     0.771242\n",
       "574c5ade56b6300003009965  189.542662   57.631399     0.972696\n",
       "57908a2622881200033b34d7   33.921569   14.156863     0.725490\n",
       "57ac8b23be7fe30003e656d0  172.656604   22.064151     0.943396\n",
       "57bb2f0b3bae540003a8d453   87.369565   46.739130     0.949275\n",
       "57c4aa7dbb8b5c000396fd3b   28.437500   71.250000     0.958333\n",
       "57d1eb86a22c9d0003dd1f05   27.480000   50.420000     0.900000\n",
       "57d956302a040a00036a8905  143.877193   32.146199     1.000000\n",
       "57d979b72a040a00036a8925   14.166667   10.611111     1.000000\n",
       "57dd2d6a4018d9000339ca43  150.462185   49.302521     0.823529\n",
       "57e518026d641600035db88a   11.666667    5.888889     1.000000\n",
       "57fcf18712cdbd000396e310   25.708333    4.041667     1.000000\n",
       "5809cc9eff2ea40003fda44d   65.473684   19.697368     1.000000\n",
       "5809cde3ff2ea40003fda452   22.840909   27.272727     1.000000\n",
       "581b08041a0ef8000308aef6  117.901408   29.640845     0.936620\n",
       "58a728a0e75bda00042a3468  351.656613    8.464037     0.733179\n",
       "58b471b384db3200044dd1b9    8.571429    6.571429     1.000000\n",
       "58b9adfce75bf80004df6536   13.190476    7.714286     1.000000\n",
       "58bf03e5cff4fa0004dd44ef   22.000000    1.666667     1.000000\n",
       "58c6e15f32f72a00046f556c   31.500000    1.050000     1.000000"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn.groupby([\"companyAlias\"]).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- The employees who use this app are from 37 companies. The average happiness level of vote is betwwen 2 and 4 for every company.\n",
    "- For the interactions, there are 284392 likes and 52561 dislikes towards the comments from other employees on the platform regarding the happiness description.\n",
    "- For the churn behavior, the average number of votes is around 46. The average stillExists is between 0 and 1, which is not surprised, since we have already turn the \"stillExists\" into a 1/0 binary variable. But there are severals companies have average 1 stillExists, which means there are no employees left the companies during this period."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Extract features from each datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Xuemeng/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: FutureWarning: using a dict on a Series for aggregation\n",
      "is deprecated and will be removed in a future version. Use                 named aggregation instead.\n",
      "\n",
      "    >>> grouper.agg(name_1=func_1, name_2=func_2)\n",
      "\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# extract votes features from dataset \"votes\" \n",
    "votes_features = votes.groupby([\"employee\"])[\"vote\"].agg({\"votes_1\": lambda x: len(x[x==1]),\n",
    "                                                          \"votes_2\": lambda x: len(x[x==2]),\n",
    "                                                          \"votes_3\": lambda x: len(x[x==3]),\n",
    "                                                          \"votes_4\": lambda x: len(x[x==4]),\n",
    "                                                          \"votes_mean\": lambda x: x.mean(),\n",
    "                                                          \"votes_std\": lambda x: x.std(),\n",
    "                                                          \"votes_num\": lambda x: len(x),}).copy().fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>votes_1</th>\n",
       "      <th>votes_2</th>\n",
       "      <th>votes_3</th>\n",
       "      <th>votes_4</th>\n",
       "      <th>votes_mean</th>\n",
       "      <th>votes_std</th>\n",
       "      <th>votes_num</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>employee</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>95</td>\n",
       "      <td>775</td>\n",
       "      <td>809</td>\n",
       "      <td>3.363320</td>\n",
       "      <td>0.703633</td>\n",
       "      <td>1723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>396</td>\n",
       "      <td>122</td>\n",
       "      <td>440</td>\n",
       "      <td>263</td>\n",
       "      <td>2.466830</td>\n",
       "      <td>1.153010</td>\n",
       "      <td>1221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>80</td>\n",
       "      <td>107</td>\n",
       "      <td>790</td>\n",
       "      <td>544</td>\n",
       "      <td>3.182117</td>\n",
       "      <td>0.778221</td>\n",
       "      <td>1521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>186</td>\n",
       "      <td>61</td>\n",
       "      <td>452</td>\n",
       "      <td>642</td>\n",
       "      <td>3.155854</td>\n",
       "      <td>1.027396</td>\n",
       "      <td>1341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>77</td>\n",
       "      <td>139</td>\n",
       "      <td>409</td>\n",
       "      <td>221</td>\n",
       "      <td>2.914894</td>\n",
       "      <td>0.885032</td>\n",
       "      <td>846</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          votes_1  votes_2  votes_3  votes_4  votes_mean  votes_std  votes_num\n",
       "employee                                                                      \n",
       "1              44       95      775      809    3.363320   0.703633       1723\n",
       "2             396      122      440      263    2.466830   1.153010       1221\n",
       "3              80      107      790      544    3.182117   0.778221       1521\n",
       "4             186       61      452      642    3.155854   1.027396       1341\n",
       "5              77      139      409      221    2.914894   0.885032        846"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "votes_features.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Xuemeng/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: FutureWarning: using a dict on a Series for aggregation\n",
      "is deprecated and will be removed in a future version. Use                 named aggregation instead.\n",
      "\n",
      "    >>> grouper.agg(name_1=func_1, name_2=func_2)\n",
      "\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# extract employee's interaction features from dataset \"interaction\" \n",
    "interaction_features = interaction.groupby([\"employee\"])[\"likes\"].agg({\"likes_num\": lambda x: len(x),}).copy().fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>likes_num</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>employee</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>-218</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-216</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-215</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-211</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>-210</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          likes_num\n",
       "employee           \n",
       "-218              1\n",
       "-216              5\n",
       "-215              1\n",
       "-211             25\n",
       "-210              2"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interaction_features.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- Since we care about employeee's happniess level and their engagement level within this survey, we extract several statistic features from dataset \"votes\" and \"interaction\", such as the count of value for each happines level, the mean and standard deviation of votes and the number of total votes and likes. This step is to intergrate datasets for further correlation analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3 Merge datasets "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>votes_1</th>\n",
       "      <th>votes_2</th>\n",
       "      <th>votes_3</th>\n",
       "      <th>votes_4</th>\n",
       "      <th>votes_mean</th>\n",
       "      <th>votes_std</th>\n",
       "      <th>votes_num</th>\n",
       "      <th>likes_num</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>employee</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>95</td>\n",
       "      <td>775</td>\n",
       "      <td>809</td>\n",
       "      <td>3.363320</td>\n",
       "      <td>0.703633</td>\n",
       "      <td>1723</td>\n",
       "      <td>2314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>396</td>\n",
       "      <td>122</td>\n",
       "      <td>440</td>\n",
       "      <td>263</td>\n",
       "      <td>2.466830</td>\n",
       "      <td>1.153010</td>\n",
       "      <td>1221</td>\n",
       "      <td>1946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>80</td>\n",
       "      <td>107</td>\n",
       "      <td>790</td>\n",
       "      <td>544</td>\n",
       "      <td>3.182117</td>\n",
       "      <td>0.778221</td>\n",
       "      <td>1521</td>\n",
       "      <td>1743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>186</td>\n",
       "      <td>61</td>\n",
       "      <td>452</td>\n",
       "      <td>642</td>\n",
       "      <td>3.155854</td>\n",
       "      <td>1.027396</td>\n",
       "      <td>1341</td>\n",
       "      <td>1528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>77</td>\n",
       "      <td>139</td>\n",
       "      <td>409</td>\n",
       "      <td>221</td>\n",
       "      <td>2.914894</td>\n",
       "      <td>0.885032</td>\n",
       "      <td>846</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          votes_1  votes_2  votes_3  votes_4  votes_mean  votes_std  \\\n",
       "employee                                                              \n",
       "1              44       95      775      809    3.363320   0.703633   \n",
       "2             396      122      440      263    2.466830   1.153010   \n",
       "3              80      107      790      544    3.182117   0.778221   \n",
       "4             186       61      452      642    3.155854   1.027396   \n",
       "5              77      139      409      221    2.914894   0.885032   \n",
       "\n",
       "          votes_num  likes_num  \n",
       "employee                        \n",
       "1              1723       2314  \n",
       "2              1221       1946  \n",
       "3              1521       1743  \n",
       "4              1341       1528  \n",
       "5               846        734  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# merge dataset \"votes_features\" and \"interaction_features\"\n",
    "votes_inters_features = pd.merge(votes_features, interaction_features, on = \"employee\", how = \"inner\")\n",
    "votes_inters_features.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['employee', 'votes_1', 'votes_2', 'votes_3', 'votes_4', 'votes_mean',\n",
       "       'votes_std', 'votes_num', 'likes_num', 'companyAlias', 'numVotes',\n",
       "       'stillExists'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# merge 3 datasets together\n",
    "churn_features = pd.merge(votes_inters_features, churn, on = \"employee\", how = \"inner\")\n",
    "churn_features.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- This step is to extract important features from different datasets and intergrate them into one dataframe for further correlation analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.4 Examine the distribution of synthetic variables and define outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the modules\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'cnt')"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = churn_features.boxplot(figsize=(10,10),column=['votes_1','votes_2','votes_3','votes_4'],rot=45,fontsize=12)\n",
    "ax.set_title(\"Distribution of each happiness level\")\n",
    "ax.set_ylabel(\"cnt\",fontsize=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c208c1850>"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "churn_features.votes_mean.plot(kind = \"density\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c1edf1050>"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "churn_features.votes_std.plot(kind = \"hist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "sm.qqplot(churn_features.votes_num,line = \"s\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c1eea6f90>"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "churn_features.likes_num.plot(kind = \"density\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a pie chart\n",
    "labels = churn_features.stillExists.value_counts().index \n",
    "labels\n",
    "values = churn_features[\"stillExists\"].value_counts().values \n",
    "values\n",
    "\n",
    "plt.pie(values, labels=labels, startangle=90, autopct='%1.1f%%', )\n",
    "\n",
    "plt.axis('equal')\n",
    "\n",
    "plt.title(\"stillExists versus Churn Subjects\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- For the columns \"votes_1\", \"votes_2\",\"votes_3\", and \"votes_4\", the distributions of happiness level are different. Apparently, the number of votes for level 3 is larger than the others. There are many outliers in level 1 and level 4. To sum up the distribution of happliness level, the employees are tend to have relatively high hapiness level, since the numbers of votes for level 3 and level 4 are higher then the votes for level 1 and level 2. \n",
    "- For the column \"votes_mean\", the result is consistent with the distributin of each happiness level. There is a peak at level 3 in the density plot.\n",
    "- For the column \"votes_std\", the distribution of votes_std is a left-skewed bell-shape. There is a peak at 0.8 in the histogram.\n",
    "- For the column \"votes_num\", the s-shape shows that there are some outliers in the dataset. Some employess are not a fan of voting for happiness level everyday, but some are active engaged with the app.\n",
    "- For the column \"likes_num\", the distribution of \"likes_num\" is similar with the distribution of \"votes_num\". Some employees are less interested in interact with the community, but some are very active.\n",
    "- For the column \"stillExists\", there are 15.7% of employees churn, and there are 84.3% of employees stay at the company during our analysis time period.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.5 Examine and plot correlation between variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>votes_1</th>\n",
       "      <th>votes_2</th>\n",
       "      <th>votes_3</th>\n",
       "      <th>votes_4</th>\n",
       "      <th>votes_mean</th>\n",
       "      <th>votes_std</th>\n",
       "      <th>votes_num</th>\n",
       "      <th>likes_num</th>\n",
       "      <th>numVotes</th>\n",
       "      <th>stillExists</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>employee</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.387677</td>\n",
       "      <td>-0.516857</td>\n",
       "      <td>-0.664058</td>\n",
       "      <td>-0.501506</td>\n",
       "      <td>-0.050093</td>\n",
       "      <td>-0.386474</td>\n",
       "      <td>-0.691164</td>\n",
       "      <td>-0.464811</td>\n",
       "      <td>-0.022605</td>\n",
       "      <td>-0.058275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>votes_1</td>\n",
       "      <td>-0.387677</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.429256</td>\n",
       "      <td>0.385790</td>\n",
       "      <td>0.375377</td>\n",
       "      <td>-0.462945</td>\n",
       "      <td>0.629691</td>\n",
       "      <td>0.630273</td>\n",
       "      <td>0.538840</td>\n",
       "      <td>0.121992</td>\n",
       "      <td>0.068006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>votes_2</td>\n",
       "      <td>-0.516857</td>\n",
       "      <td>0.429256</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.568317</td>\n",
       "      <td>0.396040</td>\n",
       "      <td>-0.206468</td>\n",
       "      <td>0.284419</td>\n",
       "      <td>0.703517</td>\n",
       "      <td>0.605276</td>\n",
       "      <td>0.105076</td>\n",
       "      <td>0.067323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>votes_3</td>\n",
       "      <td>-0.664058</td>\n",
       "      <td>0.385790</td>\n",
       "      <td>0.568317</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.525985</td>\n",
       "      <td>0.036961</td>\n",
       "      <td>0.092898</td>\n",
       "      <td>0.861186</td>\n",
       "      <td>0.609533</td>\n",
       "      <td>0.104688</td>\n",
       "      <td>0.107830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>votes_4</td>\n",
       "      <td>-0.501506</td>\n",
       "      <td>0.375377</td>\n",
       "      <td>0.396040</td>\n",
       "      <td>0.525985</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.345786</td>\n",
       "      <td>0.316056</td>\n",
       "      <td>0.814895</td>\n",
       "      <td>0.696472</td>\n",
       "      <td>0.117818</td>\n",
       "      <td>0.083166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>votes_mean</td>\n",
       "      <td>-0.050093</td>\n",
       "      <td>-0.462945</td>\n",
       "      <td>-0.206468</td>\n",
       "      <td>0.036961</td>\n",
       "      <td>0.345786</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.353053</td>\n",
       "      <td>0.023120</td>\n",
       "      <td>0.002239</td>\n",
       "      <td>-0.030664</td>\n",
       "      <td>-0.005583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>votes_std</td>\n",
       "      <td>-0.386474</td>\n",
       "      <td>0.629691</td>\n",
       "      <td>0.284419</td>\n",
       "      <td>0.092898</td>\n",
       "      <td>0.316056</td>\n",
       "      <td>-0.353053</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.366077</td>\n",
       "      <td>0.324807</td>\n",
       "      <td>0.039563</td>\n",
       "      <td>0.020638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>votes_num</td>\n",
       "      <td>-0.691164</td>\n",
       "      <td>0.630273</td>\n",
       "      <td>0.703517</td>\n",
       "      <td>0.861186</td>\n",
       "      <td>0.814895</td>\n",
       "      <td>0.023120</td>\n",
       "      <td>0.366077</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.798826</td>\n",
       "      <td>0.143068</td>\n",
       "      <td>0.110947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>likes_num</td>\n",
       "      <td>-0.464811</td>\n",
       "      <td>0.538840</td>\n",
       "      <td>0.605276</td>\n",
       "      <td>0.609533</td>\n",
       "      <td>0.696472</td>\n",
       "      <td>0.002239</td>\n",
       "      <td>0.324807</td>\n",
       "      <td>0.798826</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.135223</td>\n",
       "      <td>0.066203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>numVotes</td>\n",
       "      <td>-0.022605</td>\n",
       "      <td>0.121992</td>\n",
       "      <td>0.105076</td>\n",
       "      <td>0.104688</td>\n",
       "      <td>0.117818</td>\n",
       "      <td>-0.030664</td>\n",
       "      <td>0.039563</td>\n",
       "      <td>0.143068</td>\n",
       "      <td>0.135223</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.043863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>stillExists</td>\n",
       "      <td>-0.058275</td>\n",
       "      <td>0.068006</td>\n",
       "      <td>0.067323</td>\n",
       "      <td>0.107830</td>\n",
       "      <td>0.083166</td>\n",
       "      <td>-0.005583</td>\n",
       "      <td>0.020638</td>\n",
       "      <td>0.110947</td>\n",
       "      <td>0.066203</td>\n",
       "      <td>0.043863</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             employee   votes_1   votes_2   votes_3   votes_4  votes_mean  \\\n",
       "employee     1.000000 -0.387677 -0.516857 -0.664058 -0.501506   -0.050093   \n",
       "votes_1     -0.387677  1.000000  0.429256  0.385790  0.375377   -0.462945   \n",
       "votes_2     -0.516857  0.429256  1.000000  0.568317  0.396040   -0.206468   \n",
       "votes_3     -0.664058  0.385790  0.568317  1.000000  0.525985    0.036961   \n",
       "votes_4     -0.501506  0.375377  0.396040  0.525985  1.000000    0.345786   \n",
       "votes_mean  -0.050093 -0.462945 -0.206468  0.036961  0.345786    1.000000   \n",
       "votes_std   -0.386474  0.629691  0.284419  0.092898  0.316056   -0.353053   \n",
       "votes_num   -0.691164  0.630273  0.703517  0.861186  0.814895    0.023120   \n",
       "likes_num   -0.464811  0.538840  0.605276  0.609533  0.696472    0.002239   \n",
       "numVotes    -0.022605  0.121992  0.105076  0.104688  0.117818   -0.030664   \n",
       "stillExists -0.058275  0.068006  0.067323  0.107830  0.083166   -0.005583   \n",
       "\n",
       "             votes_std  votes_num  likes_num  numVotes  stillExists  \n",
       "employee     -0.386474  -0.691164  -0.464811 -0.022605    -0.058275  \n",
       "votes_1       0.629691   0.630273   0.538840  0.121992     0.068006  \n",
       "votes_2       0.284419   0.703517   0.605276  0.105076     0.067323  \n",
       "votes_3       0.092898   0.861186   0.609533  0.104688     0.107830  \n",
       "votes_4       0.316056   0.814895   0.696472  0.117818     0.083166  \n",
       "votes_mean   -0.353053   0.023120   0.002239 -0.030664    -0.005583  \n",
       "votes_std     1.000000   0.366077   0.324807  0.039563     0.020638  \n",
       "votes_num     0.366077   1.000000   0.798826  0.143068     0.110947  \n",
       "likes_num     0.324807   0.798826   1.000000  0.135223     0.066203  \n",
       "numVotes      0.039563   0.143068   0.135223  1.000000     0.043863  \n",
       "stillExists   0.020638   0.110947   0.066203  0.043863     1.000000  "
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn_features.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "churn_features_corr = churn_features.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot using seaborn\n",
    "import seaborn as sns\n",
    "heatmap = sns.heatmap(churn_features_corr, \n",
    "    xticklabels=churn_features_corr.columns.values, # x lables\n",
    "    yticklabels=churn_features_corr.columns.values, # y labels\n",
    "    robust=True,\n",
    "    fmt='f',\n",
    "    vmin=-1, # color scale mininum value\n",
    "    vmax=1, # color scale maximum value\n",
    "    center=0, # switch colors at 0 to indicate pos/neg relationship\n",
    "    cmap=sns.diverging_palette(20, 220, n=200), # color palette\n",
    "    square=True) # set the Axes aspect to \"equal\" so each cell will be square-shaped\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- There are negative relationships among\"votes_1\", \"votes_2\", \"votes_3\", and \"votes_4\", which is easy to understand, because the overall happiness level of an individual is relatively stable. If a person vote for level 1 many times, it is less likely for him or her to vote for level 4 after that. So if votes for level 1 increase, the votes for level 2, 3, and 4 are probobaly decrease.\n",
    "- There is a positive relationship between votes_num and likes_num. These two variables are both good indicators of engagement of employees to this app. If one person votes a lot, he or she may be more active to comment on others' updates and share thoughts with the community. \n",
    "- There is a positive relationship among \"votes_3\", \"votes_4\", \"votes_num\", and \"likes_num\". That means the person who votes for 3 level and 4 level are more likely to vote and interact with others. \n",
    "- There are no significant relationship between \"stillExists\" and other variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Model Implementation "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.1 Train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split training data and testing data\n",
    "from sklearn.model_selection import train_test_split\n",
    "from collections import Counter\n",
    "xTrain, xTest, yTrain, yTest = train_test_split(churn_features[['votes_mean','votes_std', 'votes_num', 'likes_num']],\n",
    "    churn_features[['stillExists']], # input x=features, y=targets\n",
    "    test_size = 0.3, random_state=100) # set aside 30% for testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After we split the data into training and testing data, we would like to implement several model, starting with linear regression, to find the most significant predictiver variables for churn and the better fit model to predict churn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2 Linear regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import modules\n",
    "from sklearn import linear_model, svm\n",
    "from sklearn.metrics import mean_squared_error, classification_report,precision_score, f1_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score= 0.004577740486000348\n",
      "[[-3.43545495e-02 -9.72821305e-02  1.60534465e-04 -2.81813921e-05]]\n"
     ]
    }
   ],
   "source": [
    "# use training data to build a linear regression model and fit into testing data \n",
    "linearModel = linear_model.LinearRegression()\n",
    "linearModel.fit(xTrain, yTrain)\n",
    "score_linear = linearModel.score(xTest, yTest)\n",
    "\n",
    "# examine the accuracy of the model\n",
    "print(\"Score=\", score_linear)\n",
    "print(linearModel.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.3 Logistic regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({1: 1290})\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       192\n",
      "           1       0.85      1.00      0.92      1098\n",
      "\n",
      "    accuracy                           0.85      1290\n",
      "   macro avg       0.43      0.50      0.46      1290\n",
      "weighted avg       0.72      0.85      0.78      1290\n",
      "\n",
      "[[ 3.25900347e-01  7.84162741e-02  1.20249127e-03 -2.32203354e-04]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Xuemeng/opt/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "# use training data to build a logistic regression model and fit into testing data \n",
    "logisticModel = linear_model.LogisticRegression(penalty='l2',solver='lbfgs',max_iter=5000)\n",
    "logisticModel.fit(xTrain, yTrain.values.ravel())\n",
    "y_predict_logistic = logisticModel.predict(xTest)\n",
    "cnt = Counter(y_predict_logistic)\n",
    "print(cnt)\n",
    "\n",
    "# examine the accuracy of the model\n",
    "print(classification_report(yTest, y_predict_logistic))\n",
    "print(logisticModel.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.4 Stochastic Gradient Descent model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8449612403100775\n",
      "[[-50.71496277 -69.42888907  10.64404876 -38.97230452]]\n"
     ]
    }
   ],
   "source": [
    "# use training data to build a Stochastic Gradient Descent model and fit into testing data\n",
    "sgd = linear_model.SGDClassifier(max_iter=3000)\n",
    "sgd.fit(xTrain, yTrain.values.ravel())\n",
    "y_predict_sgd = sgd.predict(xTest)\n",
    "\n",
    "# examine the accuracy of the model\n",
    "mse_sgd = mean_squared_error(y_predict_sgd, yTest)\n",
    "print(mse_sgd)\n",
    "print(sgd.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.5 Ridge regression and classification model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8397606382978723\n",
      "[[-6.84063667e-02 -1.93494297e-01  3.20896659e-04 -5.63721273e-05]]\n"
     ]
    }
   ],
   "source": [
    "# use training data to build a Ridge classification model and fit into testing data\n",
    "ridge = linear_model.RidgeClassifier(alpha=0.5)\n",
    "ridge.fit(xTrain, yTrain.values.ravel())\n",
    "score_ridge = ridge.score(xTrain, yTrain)\n",
    "\n",
    "# examine the accuracy of the model\n",
    "print(score_ridge)\n",
    "print(ridge.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- The absolute coefficients of \"votes_mean\" and \"votes_std\" are higher than the absolute coefficients of \"votes_num\" and \"likes_num\" in each model setting. That means the impact of \"votes_mean\" and \"votes_std\" on churn are higher than the impact of \"votes_num\" and \"likes_num\".\n",
    "- Linear regression model are not suitable for predicting churn behavior since the prediction score is low.\n",
    "- Logistic regression model, SGD model, and Ridge classification model perform better than the linear regression model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.6 Visualize the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c207c2790>"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x = \"votes_mean\", y =\"stillExists\", data = churn_features, logistic = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee</th>\n",
       "      <th>votes_1</th>\n",
       "      <th>votes_2</th>\n",
       "      <th>votes_3</th>\n",
       "      <th>votes_4</th>\n",
       "      <th>votes_mean</th>\n",
       "      <th>votes_std</th>\n",
       "      <th>votes_num</th>\n",
       "      <th>likes_num</th>\n",
       "      <th>numVotes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stillExists</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>201.238872</td>\n",
       "      <td>73.043027</td>\n",
       "      <td>82.397626</td>\n",
       "      <td>235.229970</td>\n",
       "      <td>158.281899</td>\n",
       "      <td>2.882092</td>\n",
       "      <td>0.852148</td>\n",
       "      <td>548.952522</td>\n",
       "      <td>833.737389</td>\n",
       "      <td>43.979228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>171.932671</td>\n",
       "      <td>90.962196</td>\n",
       "      <td>97.682395</td>\n",
       "      <td>293.565397</td>\n",
       "      <td>200.804636</td>\n",
       "      <td>2.876287</td>\n",
       "      <td>0.863862</td>\n",
       "      <td>683.014625</td>\n",
       "      <td>1013.148731</td>\n",
       "      <td>52.881071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               employee    votes_1    votes_2     votes_3     votes_4  \\\n",
       "stillExists                                                             \n",
       "0            201.238872  73.043027  82.397626  235.229970  158.281899   \n",
       "1            171.932671  90.962196  97.682395  293.565397  200.804636   \n",
       "\n",
       "             votes_mean  votes_std   votes_num    likes_num   numVotes  \n",
       "stillExists                                                             \n",
       "0              2.882092   0.852148  548.952522   833.737389  43.979228  \n",
       "1              2.876287   0.863862  683.014625  1013.148731  52.881071  "
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn_features.groupby([\"stillExists\"]).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary:\n",
    "- The graph of logistic regression model is not very ideal, since the line and the distribution of scatters are not a clear s-shape. Simply, we can check the mean of votes_mean and votes_std of existing employees and churn employees. The numbers are very close. So we cannot infer that there is a significant prediction of churn using votes_mean and votes_std."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Regarding to distributions of features:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- The overall distributions of employees' happiness level are different. The number of votes for level 3 is larger than the others. Employees are tend to have relatively high hapiness level, since the numbers of votes for level 3 and level 4 are higher then the votes for level 1 and level 2. \n",
    "- There are some outliers in the dataset. Some employess are not a big fan of voting for happiness level everyday, but some are actively engaged with this.\n",
    "- Overall, there are 15.7% of employees churn, and 84.3% of employees stay at the company during the time period of our analysis time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Regarding to relationship between variables:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- There are negative relationships among\"votes_1\", \"votes_2\", \"votes_3\", and \"votes_4\", because the overall happiness level of an individual is relatively stable. If a person vote for level 1 many times, it is less likely for him or her to vote for level 4 after that. So if votes for level 1 increase, the votes for level 2, 3, and 4 are probobaly decrease.\n",
    "- There is a positive relationship between votes_num and likes_num. These two variables are both good indicators of engagement of employees. If one person votes a lot, he or she may be more active to comment on others' updates and share thoughts with the community.\n",
    "- There is a positive relationship among \"votes_3\", \"votes_4\", \"votes_num\", and \"likes_num\". That means the person who votes for 3 level and 4 level are more likely to vote and interact with others. We find this is interesting because it indicates that the happier people are more likely to express themselves and engage with others.\n",
    "- There are no significant relationship between \"stillExists\" and other variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Regarding to prediction models:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Linear regression model are not suitable for predicting churn behavior since the prediction score is low.\n",
    "- Logistic regression model, SGD model, and Ridge classification model perform better than the linear regression model. Especially, the logistic regression model perform well with a 85% precision rate for predicting employee retention, but it is not suitable for predicting churn.\n",
    "- The impact of \"votes_mean\" and \"votes_std\" on churn are higher than the impact of \"votes_num\" and \"likes_num\". However, we could not determine that they are siginificant predictors for employee churn.\n",
    "- To sum up, surprisingly, a prior expected explanatory features such as mean happiness level and the ratio of likes (positivity), were not significant. \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
